Initial try:
EPOCH 1 ...
Validation Accuracy = 0.654

EPOCH 2 ...
Validation Accuracy = 0.768

EPOCH 3 ...
Validation Accuracy = 0.808

EPOCH 4 ...
Validation Accuracy = 0.826

EPOCH 5 ...
Validation Accuracy = 0.836

EPOCH 6 ...
Validation Accuracy = 0.842

EPOCH 7 ...
Validation Accuracy = 0.846

EPOCH 8 ...
Validation Accuracy = 0.864

EPOCH 9 ...
Validation Accuracy = 0.859

EPOCH 10 ...
Validation Accuracy = 0.860
---
Try normalize
X_train_n = (x_train -128)/128 is not working due to data type problem
X_train_n = (np.array(X_train).astype('float') - 128)/128 works

EPOCH 1 ...
Validation Accuracy = 0.777

EPOCH 2 ...
Validation Accuracy = 0.853

EPOCH 3 ...
Validation Accuracy = 0.852

EPOCH 4 ...
Validation Accuracy = 0.873

EPOCH 5 ...
Validation Accuracy = 0.878

EPOCH 6 ...
Validation Accuracy = 0.895

EPOCH 7 ...
Validation Accuracy = 0.897

EPOCH 8 ...
Validation Accuracy = 0.893

EPOCH 9 ...
Validation Accuracy = 0.892

EPOCH 10 ...
Validation Accuracy = 0.911

By simplying having the input data normalized the model improved quite a bit: from 86% to 91%

----
EEPOCH 90 ...
training error = 1.000
Validation Accuracy = 0.949

EPOCH 91 ...
training error = 1.000
Validation Accuracy = 0.952

EPOCH 92 ...
training error = 1.000
Validation Accuracy = 0.949

EPOCH 93 ...
training error = 1.000
Validation Accuracy = 0.950

EPOCH 94 ...
training error = 1.000
Validation Accuracy = 0.949

EPOCH 95 ...
training error = 1.000
Validation Accuracy = 0.948

EPOCH 96 ...
training error = 1.000
Validation Accuracy = 0.947

EPOCH 97 ...
training error = 1.000
Validation Accuracy = 0.948

EPOCH 98 ...
training error = 1.000
Validation Accuracy = 0.948

EPOCH 99 ...
training error = 1.000
Validation Accuracy = 0.947

EPOCH 100 ...
training error = 1.000
Validation Accuracy = 0.947


Model saved
Test Accuracy = 0.934
---
Apparently the model is over fitting training accuracy is 100%... validation and test is similar.
High variance will need regularization
Turn on L2 regularization
EPOCH 1 ...
training error = 0.863
Validation Accuracy = 0.781

EPOCH 2 ...
training error = 0.930
Validation Accuracy = 0.837

EPOCH 3 ...
training error = 0.946
Validation Accuracy = 0.854

EPOCH 4 ...
training error = 0.970
Validation Accuracy = 0.899

EPOCH 5 ...
training error = 0.976
Validation Accuracy = 0.895

EPOCH 6 ...
training error = 0.985
Validation Accuracy = 0.893

EPOCH 7 ...
training error = 0.978
Validation Accuracy = 0.893

EPOCH 8 ...
training error = 0.984
Validation Accuracy = 0.906

EPOCH 9 ...
training error = 0.991
Validation Accuracy = 0.910

EPOCH 10 ...
training error = 0.992
Validation Accuracy = 0.897

EPOCH 11 ...
training error = 0.993
Validation Accuracy = 0.904

EPOCH 12 ...
training error = 0.992
Validation Accuracy = 0.905

EPOCH 13 ...
training error = 0.995
Validation Accuracy = 0.913

EPOCH 14 ...
training error = 0.992
Validation Accuracy = 0.916

EPOCH 15 ...
training error = 0.995
Validation Accuracy = 0.924

EPOCH 16 ...
training error = 0.997
Validation Accuracy = 0.924

EPOCH 17 ...
training error = 0.998
Validation Accuracy = 0.928

EPOCH 18 ...
training error = 0.996
Validation Accuracy = 0.920

EPOCH 19 ...
training error = 0.991
Validation Accuracy = 0.904

EPOCH 20 ...
training error = 0.994
Validation Accuracy = 0.921
--- After both drop out = 0.5, and L2 normalization

Training...

EPOCH 1 ...
training error = 0.743
Validation Accuracy = 0.757

EPOCH 2 ...
training error = 0.882
Validation Accuracy = 0.875

EPOCH 3 ...
training error = 0.910
Validation Accuracy = 0.895

EPOCH 4 ...
training error = 0.922
Validation Accuracy = 0.909

EPOCH 5 ...
training error = 0.942
Validation Accuracy = 0.923

EPOCH 6 ...
training error = 0.946
Validation Accuracy = 0.916

EPOCH 7 ...
training error = 0.962
Validation Accuracy = 0.932

EPOCH 8 ...
training error = 0.962
Validation Accuracy = 0.937

EPOCH 9 ...
training error = 0.965
Validation Accuracy = 0.937

EPOCH 10 ...
training error = 0.974
Validation Accuracy = 0.932

EPOCH 11 ...
training error = 0.972
Validation Accuracy = 0.950

EPOCH 12 ...
training error = 0.977
Validation Accuracy = 0.948

EPOCH 13 ...
training error = 0.977
Validation Accuracy = 0.939

EPOCH 14 ...
training error = 0.975
Validation Accuracy = 0.939

EPOCH 15 ...
training error = 0.979
Validation Accuracy = 0.949

EPOCH 16 ...
training error = 0.977
Validation Accuracy = 0.949

EPOCH 17 ...
training error = 0.982
Validation Accuracy = 0.945

EPOCH 18 ...
training error = 0.981
Validation Accuracy = 0.957

EPOCH 19 ...
training error = 0.984
Validation Accuracy = 0.949

EPOCH 20 ...
training error = 0.984
Validation Accuracy = 0.951

Model saved
INFO:tensorflow:Restoring parameters from ./lenet
Test Accuracy = 0.932

Clearly the overfitting is not as severe, but still high variance?
---
Try to use bigger batch, the accuracy gets less noisy

Training...

EPOCH 1 ...
training error = 0.650
Validation Accuracy = 0.621

EPOCH 2 ...
training error = 0.870
Validation Accuracy = 0.804

EPOCH 3 ...
training error = 0.950
Validation Accuracy = 0.864

EPOCH 4 ...
training error = 0.960
Validation Accuracy = 0.877

EPOCH 5 ...
training error = 0.960
Validation Accuracy = 0.880

EPOCH 6 ...
training error = 0.970
Validation Accuracy = 0.900

EPOCH 7 ...
training error = 0.970
Validation Accuracy = 0.908

EPOCH 8 ...
training error = 0.970
Validation Accuracy = 0.918

EPOCH 9 ...
training error = 0.970
Validation Accuracy = 0.920

EPOCH 10 ...
training error = 0.990
Validation Accuracy = 0.914

EPOCH 11 ...
training error = 0.960
Validation Accuracy = 0.918
...
EPOCH 49 ...
training error = 1.000
Validation Accuracy = 0.941

EPOCH 50 ...
training error = 1.000
Validation Accuracy = 0.950

Model saved
INFO:tensorflow:Restoring parameters from ./lenet
Test Accuracy = 0.935




---
ssh carnd@54.193.79.160 (current instance IP)
